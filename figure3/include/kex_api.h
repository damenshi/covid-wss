#ifndef KEX_API_H
#define KEX_API_H





#define KEX_SECRETKEYBYTES		33
#define KEX_PUBLICKEYBYTES		177
#define KEX_BYTES		        32

#define KEX_ATOB_MESSAGEBYES		33
#define KEX_BTOA_MESSAGEBYES		177
#define KEX_ATOB_MESSAGEBYES2		144

#define SECRETKEYBYTES		        32
#define PUBLICKEYBYTES		        33
#define CERT_BYTES		        64
#define PID_BYTES		        PUBLICKEYBYTES + CERT_BYTES
#define CIPHER_BYTES                    144
#define PT_BYTES                        130

#define KEX_ALGNAME "CAKE_KEX_ALGORITHM"


/* the relization of this api is in cake_kex_impl.h*/



/****************initial and destroy methord**********/


/*************************************
function:kex_init
desc :to initialize the algorithm library and CA's public and private key
input : null
output: null
return: 0  -succ;
           -1 -fail
*************************************/
int kex_init(void);


/*************************************
function:kex_destroy
desc :to destrop context at the end of program and free CA's public and private key
input : null
output: null
return:  null
*************************************/
void kex_destroy(void);

int test_printf();


/**************** Methord for CAKE ******************************************************************************/


/*************************************
function:cake_kex_keygen
desc :to generate Alice's or Bob's  static pulic and  static  private key, certtificate pid.
input : null
output: static_pk                -static public key;                                                            33bytes
        static_sk                -static private key;                                                           32bytes
        pidb                     -certificate include pk and pk's signature generated by ECDSA                  97bytes
return:  0  - succ
        -1-fail
        -2-invalid parameter
*************************************/
int  cake_kex_keygen( unsigned char * static_pk, unsigned char * static_sk, unsigned char * pid, unsigned char * h);



/*************************************
function: cake_kex_kdf_Alice
desc: to generate Alice's pulic kex exchange infomation message
input :  static_pk_a            -static public key of Alice;                                                   32bytes
         pida                   - Alice's certificate include pk and pk's signature generated by ECDSA         97bytes
output: AtoBmessage     -AtoB first message;                    33bytes
        eph_sk_x        -Alice's ephmeral private key x ;       32bytes
        eph_pk_x        -Alice's ephmeral public key X ;       33bytes
        eph_d           -Alice's ephmeral secret d ;            32bytes
return:  0  - succ
        -1-fail
        -2-invalid parameter
*************************************/
int  cake_kex_kdf_Alice( unsigned char * AtoBmessage,   unsigned char *eph_sk_x, unsigned char *eph_pk_x, unsigned char *eph_d,
                                    unsigned char *static_pk_a,    unsigned char *pida);


/*************************************
function:cake_kex_kdf_Bob
desc :After receive Alice's public kex exchange infomation, it generates Bob's pulic and private kex exchange infomation
      then generates  Bob's shared secret key
input : AtoBmessage     -AtoB first message;                    33bytes
        static_sk_b        -Bob's static private key b ;       32bytes
        static_pk_b        -Bob's static public key B ;        33bytes
         pidb              -Bob's certificate include pk and pk's signature generated by ECDSA                  97bytes

output: BtoAmessage     -Bob's public kex exchange infomationkey;            177 bytes
        K_1             -Bob's  key for AES encryption;                      32  bytes
        B_ss              -Bob's shared secret key                               32  bytes
return:  0  - succ
        -1- fail
        -2-invalid parameter
*************************************/

int  cake_kex_kdf_Bob(unsigned char * BtoAmessage,   unsigned char * K_1,
unsigned char * AtoBmessage ,  unsigned char *static_sk_b, unsigned char *static_pk_b, unsigned char *pidb,    unsigned char * B_ss);




/*************************************
function:cake_kex_kdf_Alice2
desc :After receive Bob's public kex exchange infomation, it generates Alice's  AtoBmessage2, then check the identity of Bob
input :  AtoBmessage     -AtoB first message;                                 33bytes
         BtoAmessage     -Bob's public kex exchange infomationkey;            177 bytes
        static_pk_b        -Bob's static public key B ;        33bytes
        eph_pk_x        -Alice's ephmeral public key X ;       33bytes
         pida              -Alice's certificate include pk and pk's signature generated by ECDSA                  97bytes
       static_sk_a        -Alice's static private key a ;       32bytes
         eph_sk_x        -Alice's ephmeral private key x ;       32bytes
          eph_d           -Alice's ephmeral secret d ;            32bytes


output:  AtoBmessage2     -AtoB second message;                         144bytes
         A_ss              -Alice's shared secret key                      32  bytes
return:  0  - succ
        -1- fail
        -2-invalid parameter
*************************************/

int  cake_kex_kdf_Alice2(unsigned char * AtoBmessage2,
                    unsigned char * BtoAmessage,
                    unsigned char * AtoBmessage,
                    unsigned char * static_pk_b,   unsigned char *eph_pk_x,
                    unsigned char * pida,
                    unsigned char * static_sk_a,
                    unsigned char * eph_sk_x,
                    unsigned char * eph_d,
		    unsigned char * A_ss,
                    unsigned char * h);





/*************************************
function:cake_kex_kdf_Bob2
desc :After receive receiver's public kex exchange infomation, it generates receiver's shared secret key
input :   static_pk_a       -alice's static public key A ;              33bytes
           K_1             -Bob's  key for AES encryption;               32  bytes
         AtoBmessage     -AtoB first message;                                 33bytes
         AtoBmessage2     -AtoB second message;                         144bytes
output:  null
return:  0  - succ
        -1- fail
        -2-invalid parameter
*************************************/

int  cake_kex_kdf_Bob2(  unsigned char * AtoBmessage, unsigned char * AtoBmessage2,
                    unsigned char * static_pk_a,   unsigned char * K_1, unsigned char * h);





#endif
