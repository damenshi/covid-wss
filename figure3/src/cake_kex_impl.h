#ifndef  CAKE_KEX_IMPL_H_
#define   CAKE_KEX_IMPL_H_

#include <sys/types.h>
#include <errno.h>
#include <sys/stat.h>
#include <fcntl.h>
#ifndef _GNU_SOURCE
#define _GNU_SOURCE
#endif
#include <unistd.h>
#include <sys/syscall.h>



#include "include/kex_api.h"
#include "myOpenSSL.h"
#include "sm3.h"
#include "encrypt.h"


static unsigned char *CA_pk = NULL;
static unsigned char *CA_sk = NULL;

static secp256k1_context *kctx = NULL;

unsigned char *flag = "-HE";

/*************************************************Initial and Destroy methord***********************************************/

int kex_init(void)
{
    secp256k1_gej pubj;
    secp256k1_ge pub;   /*public key B */
    secp256k1_scalar scalar_sk;   /*private key b */

    int ret;
    size_t size;

   	kctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);
	if(NULL == kctx)
	{
	   printf("gamma init fail!");
       	   return -1;
	}

     CA_pk   =  (unsigned char *)malloc(PUBLICKEYBYTES*sizeof(unsigned char));
     CA_sk =  (unsigned char *)malloc(SECRETKEYBYTES*sizeof(unsigned char));


     { /*generate CA's public and private key */
     random_scalar_generation(&scalar_sk);
     secp256k1_ecmult_gen(&kctx->ecmult_gen_ctx, &pubj, &scalar_sk);
     secp256k1_ge_set_gej(&pub, &pubj);

     /*serialize server side static public key */
     ret =  secp256k1_eckey_pubkey_serialize(&pub, CA_pk,  &size, 1);
     if (size!= PUBLICKEYBYTES ||ret ==0 ) return -1;
     /*serialize server side static private key */
     secp256k1_scalar_get_b32(CA_sk, &scalar_sk);
     }

return 0;
}



void kex_destroy()
{
 	secp256k1_context_destroy(kctx);
        free (CA_pk);
        free (CA_sk);



}


int printChar( unsigned char * str, int length)
{
			int j; 
			for(j=0;j<length;j++)
			{
				printf("%02X",*(str+j));
			}
			printf("]\n");


}


/********Methord for CAKE ****************************************************************************************************/


/*************************************
function:cake_kex_keygen
desc :to generate Alice's or Bob's  static pulic and  static  private key, certtificate pid.
input : null
output: static_pk                -static public key;                                                            33bytes
        static_sk                -static private key;                                                           32bytes
        pidb                     -certificate include pk and pk's signature generated by ECDSA                  97bytes
return:  0  - succ
        -1-fail
        -2-invalid parameter
*************************************/
int  cake_kex_keygen( unsigned char * static_pk, unsigned char * static_sk, unsigned char * pid, unsigned char * h)
{
    secp256k1_gej pubj;
    secp256k1_ge pub;   /*public key B */
    secp256k1_scalar scalar_sk;   /*private key b */
    secp256k1_scalar nonce;
    sm3_context sm3_ctx;
    unsigned char output_hash[32];
    int ret;
    size_t size;

   
 if (NULL == static_pk || NULL == static_sk || NULL == pid   )
    return -2;

     /*generate server's public and private key */
     {
     random_scalar_generation(&scalar_sk);
     secp256k1_ecmult_gen(&kctx->ecmult_gen_ctx, &pubj, &scalar_sk);
     secp256k1_ge_set_gej(&pub, &pubj);

     /*serialize server side static public key */
     ret =  secp256k1_eckey_pubkey_serialize(&pub, static_pk,  &size, 1);
     if (size!= PUBLICKEYBYTES ||ret ==0 ) return -1;
     /*serialize server side static private key */
     secp256k1_scalar_get_b32(static_sk, &scalar_sk);
     }
     { /*generate pidB*/
         memcpy(pid,  static_pk, PUBLICKEYBYTES);
         random_scalar_generation(&nonce);
         ret = ecdsa_sig_sign(&kctx->ecmult_gen_ctx, pid + PUBLICKEYBYTES, CA_sk,  static_pk, PUBLICKEYBYTES, &nonce);
         if (ret != 0) return ret;
     }
     /*generate hB*/
     {
        sm3_starts( &sm3_ctx );
        sm3_update( &sm3_ctx, flag, strlen(flag));
        sm3_update( &sm3_ctx, pid, PID_BYTES);
        sm3_finish( &sm3_ctx, output_hash );
        memcpy(h, output_hash, SECRETKEYBYTES);
     }
    return 0;
}



/*************************************
function: cake_kex_kdf_Alice
desc: to generate Alice's pulic kex exchange infomation message
input :  static_pk_a            -static public key of Alice;                                                   32bytes
         pida                   - Alice's certificate include pk and pk's signature generated by ECDSA         97bytes
output: AtoBmessage     -AtoB first message;                    33bytes
        eph_sk_x        -Alice's ephmeral private key x ;       32bytes
        eph_pk_x        -Alice's ephmeral public key X ;       33bytes
        eph_d           -Alice's ephmeral secret d ;            32bytes
return:  0  - succ
        -1-fail
        -2-invalid parameter
*************************************/
int  cake_kex_kdf_Alice( unsigned char * AtoBmessage,   unsigned char *eph_sk_x, unsigned char *eph_pk_x, unsigned char *eph_d,
                                    unsigned char *static_pk_a,    unsigned char *pida)
{

    int   ret;
    size_t size;

    secp256k1_gej pubj;
    secp256k1_ge pub;   /*public key X */
    secp256k1_scalar scalar_sk;   /*private key x */

    int  overflow;

    secp256k1_scalar d;
    secp256k1_gej pubj_X;

    sm3_context sm3_ctx;
    unsigned char output_hash[KEX_SECRETKEYBYTES];

    
    secp256k1_gej X_bar_j;
    secp256k1_ge X_bar;   /* X_bar */

    secp256k1_ge A;

    unsigned char X_char[PUBLICKEYBYTES];

    if (NULL == AtoBmessage || NULL == eph_sk_x || NULL == eph_pk_x || NULL == eph_d ||  NULL == static_pk_a || NULL == pida  )
    return -2;


    /*generate sender's empheral public key*/
    random_scalar_generation_halfq(&scalar_sk);
    secp256k1_ecmult_gen(&kctx->ecmult_gen_ctx, &pubj, &scalar_sk);
    secp256k1_ge_set_gej(&pub, &pubj);


     /*serialize public empheral key X */
     ret =  secp256k1_eckey_pubkey_serialize(&pub, X_char,  &size, 1);
     if (size!= PUBLICKEYBYTES ||ret ==0 ) return -1;
     memcpy(eph_pk_x, X_char, PUBLICKEYBYTES);
     /*serialize private key x */
     secp256k1_scalar_get_b32(eph_sk_x, &scalar_sk);


     /*Compute d  */

    sm3_starts( &sm3_ctx );
    sm3_update( &sm3_ctx, X_char, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, pida, PID_BYTES);
    sm3_finish( &sm3_ctx, output_hash );
  
    memcpy(eph_d,output_hash, SECRETKEYBYTES );

    secp256k1_scalar_set_b32(&d, output_hash, &overflow);



    /*Compute X_bar =  A+ dX */
     secp256k1_gej_set_ge(&pubj_X, &pub);
     secp256k1_ecmult(&kctx->ecmult_ctx, &X_bar_j, &pubj_X, &d, NULL);    /* X_bar_j = d*X_j + Null*G  */
     ret = secp256k1_eckey_pubkey_parse(&A, static_pk_a, PUBLICKEYBYTES);
     if(ret==0) return -1;

     secp256k1_gej_add_ge(&X_bar_j, &X_bar_j, &A);
     secp256k1_ge_set_gej(&X_bar, &X_bar_j);
     ret =  secp256k1_eckey_pubkey_serialize(&X_bar, AtoBmessage,  &size, 1);
     if (size!= PUBLICKEYBYTES ||ret ==0 ) return -1;

     /*Alice =>>===========>>=========>> AtoBmessage = X_bar =  A + dX ============>>========>>  Bob  */

 return 0;
}


/*************************************
function:cake_kex_kdf_Bob
desc :After receive Alice's public kex exchange infomation, it generates Bob's pulic and private kex exchange infomation
      then generates  Bob's shared secret key
input : AtoBmessage     -AtoB first message;                    33bytes
        static_sk_b        -Bob's static private key b ;       32bytes
        static_pk_b        -Bob's static public key B ;        33bytes
         pidb              -Bob's certificate include pk and pk's signature generated by ECDSA                  97bytes

output: BtoAmessage     -Bob's public kex exchange infomationkey;            177 bytes
        K_1             -Bob's  key for AES encryption;                      32  bytes
        B_ss              -Bob's shared secret key                               32  bytes
return:  0  - succ
        -1- fail
        -2-invalid parameter
*************************************/

int  cake_kex_kdf_Bob(unsigned char * BtoAmessage,   unsigned char * K_1,
              unsigned char * AtoBmessage ,  unsigned char *static_sk_b,  unsigned char *static_pk_b, unsigned char *pidb,    unsigned char * B_ss)
{

    int   ret,i;
    size_t size;

    int  overflow;


    secp256k1_scalar e;
    secp256k1_scalar scalar_b;    /*scalar form of receiver_static_sk*/
    secp256k1_gej pubj_Y;
    secp256k1_ge pub_Y;   /*public key Y */

    secp256k1_scalar scalar_sk_y;   /*private key y */

    secp256k1_scalar index; /*to compute b + ye */

 sm3_context sm3_ctx;
    unsigned char output_hash[KEX_SECRETKEYBYTES];
 

 

    secp256k1_gej Y_bar_j;
    secp256k1_ge Y_bar;   /* Y_bar */

    secp256k1_gej X_bar_j;
    secp256k1_ge X_bar;   /* X_bar */

    secp256k1_gej PS_j;
    secp256k1_ge PS;

    secp256k1_ge B;

 

    unsigned char Y_char[PUBLICKEYBYTES];
    unsigned char Y_bar_char[PUBLICKEYBYTES];

    unsigned char PS_char[PUBLICKEYBYTES];
 
    unsigned char cipher[CIPHER_BYTES];
    unsigned char pt[CIPHER_BYTES];

   if (NULL == BtoAmessage || NULL == K_1 || NULL == AtoBmessage || NULL == static_sk_b ||  NULL == static_pk_b || NULL == pidb  || NULL == B_ss )
    return -2;


    /*generate Y and y*/
    random_scalar_generation_halfq(&scalar_sk_y);
    secp256k1_ecmult_gen(&kctx->ecmult_gen_ctx, &pubj_Y, &scalar_sk_y);     /*Y =  y*P */
    secp256k1_ge_set_gej(&pub_Y, &pubj_Y);
    ret =  secp256k1_eckey_pubkey_serialize(&pub_Y, Y_char,  &size, 1);
    if (size!= PUBLICKEYBYTES ||ret ==0 ) return -1;

    sm3_starts( &sm3_ctx );
    sm3_update( &sm3_ctx, AtoBmessage, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, Y_char, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, pidb, PID_BYTES);
    sm3_finish( &sm3_ctx, output_hash );
 
    secp256k1_scalar_set_b32(&e, output_hash, &overflow);
    VERIFY_CHECK(overflow == 0);


     /* compute PS = X_bar^(b+ ye) */

    secp256k1_scalar_set_b32(&scalar_b, static_sk_b, &overflow);
    VERIFY_CHECK(overflow == 0);
    secp256k1_scalar_mul( &index, &scalar_sk_y, &e);
    secp256k1_scalar_add(&index, &index, &scalar_b);      /*compute index = b+ ye*/

    ret = secp256k1_eckey_pubkey_parse(&X_bar,  AtoBmessage, PUBLICKEYBYTES); /*parse char form pk into secp256k1_ge, in this step we will check X is a valid point on the curve */
    if(ret==0) return -1;

     secp256k1_gej_set_ge(&X_bar_j, &X_bar);
     secp256k1_ecmult(&kctx->ecmult_ctx, &PS_j, &X_bar_j, &index, NULL);    /* PS = index*X + Null*G  */

     if (secp256k1_gej_is_infinity(&PS_j)!=0) return -1;

     secp256k1_ge_set_gej(&PS, &PS_j);
     ret =  secp256k1_eckey_pubkey_serialize(&PS, PS_char,  &size, 1);
     if (size!= PUBLICKEYBYTES ||ret ==0 ) return -1;


     /* compute Y^bar = B + Y^e */
     secp256k1_ecmult(&kctx->ecmult_ctx, &Y_bar_j, &pubj_Y, &e, NULL);    /* Y_bar_j = e*Y_j + Null*G  */
     ret = secp256k1_eckey_pubkey_parse(&B, static_pk_b, PUBLICKEYBYTES);
     if(ret==0) return -1;


     secp256k1_gej_add_ge(&Y_bar_j, &Y_bar_j, &B);
     secp256k1_ge_set_gej(&Y_bar, &Y_bar_j);
     ret =  secp256k1_eckey_pubkey_serialize(&Y_bar, Y_bar_char,  &size, 1);
     if (size!= PUBLICKEYBYTES ||ret ==0 ) return -1;
     secp256k1_scalar_add(&index, &index, &scalar_b);      /*compute index = b+ ye*/


    /* compute KDF  */

    sm3_starts( &sm3_ctx );
    sm3_update( &sm3_ctx, PS_char, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, AtoBmessage, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, Y_bar_char, PUBLICKEYBYTES);
    sm3_finish( &sm3_ctx, K_1 );


    /*generate shared secret and K_1 for AES by seed expander  */

    sm3_starts( &sm3_ctx );
    sm3_update( &sm3_ctx, PS_char, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, AtoBmessage, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, Y_bar_char, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, K_1, SECRETKEYBYTES);
    sm3_finish( &sm3_ctx, B_ss );


    /*generate CT by AES_GCM then memcpy Y_bar and Cipher text into receiver_public_message*/

    memcpy(BtoAmessage, Y_bar_char, PUBLICKEYBYTES);
    memcpy(pt, Y_char, PUBLICKEYBYTES);
    memcpy(pt+PUBLICKEYBYTES, pidb, PID_BYTES);

    /*  My_AES_gcm_encrypt(cipher, pt, PT_BYTES, K_1);*/

       encrypt(cipher, pt, PT_BYTES, K_1);

      memcpy(BtoAmessage+PUBLICKEYBYTES, cipher, CIPHER_BYTES);

    /*Alice  <<===========<<========<<  BtoAmessage = Y_bar + cipher <<==========<<========<<  Bob  */

return 0;

}





/*************************************
function:cake_kex_kdf_Alice2
desc :After receive Bob's public kex exchange infomation, it generates Alice's  AtoBmessage2, then check the identity of Bob
input :  AtoBmessage     -AtoB first message;                                 33bytes
         BtoAmessage     -Bob's public kex exchange infomationkey;            177 bytes
        static_pk_b        -Bob's static public key B ;        33bytes
        eph_pk_x        -Alice's ephmeral public key X ;       33bytes
         pida              -Alice's certificate include pk and pk's signature generated by ECDSA                  97bytes
       static_sk_a        -Alice's static private key a ;       32bytes
         eph_sk_x        -Alice's ephmeral private key x ;       32bytes
          eph_d           -Alice's ephmeral secret d ;            32bytes


output:  AtoBmessage2     -AtoB second message;                         144bytes
         A_ss              -Alice's shared secret key                      32  bytes
return:  0  - succ
        -1- fail
        -2-invalid parameter
*************************************/

int  cake_kex_kdf_Alice2(unsigned char * AtoBmessage2,
                    unsigned char * BtoAmessage,  unsigned char * AtoBmessage,   unsigned char * static_pk_b,  unsigned char *eph_pk_x,
                     unsigned char *pida,  unsigned char *static_sk_a,  unsigned char *eph_sk_x,   unsigned char *eph_d,  unsigned char * A_ss, unsigned char * h)
{
    int ret, i, overflow;
    size_t  size;
 
    secp256k1_scalar scalar_eph_sk;
    secp256k1_scalar e, d, a;
    secp256k1_scalar index; /*to compute b + ye */

    secp256k1_gej Y_bar_j;
    secp256k1_ge Y_bar;   /* Y_bar */
    secp256k1_gej Y_bar_j_check;
    secp256k1_ge Y_bar_check;   /* Y_bar_check for test Y_bar =  BY^e */
    secp256k1_gej PS_j;
    secp256k1_ge PS;

    secp256k1_gej Y_j;
    secp256k1_ge Y;

    unsigned char  Y_bar_char[PUBLICKEYBYTES];
    unsigned char compute_h[SECRETKEYBYTES];
    unsigned char  Y_bar_check_char[PUBLICKEYBYTES];

    unsigned char Y_char[PUBLICKEYBYTES];

    unsigned char PS_char[PUBLICKEYBYTES];
    unsigned char output_hash[32];

    unsigned char B_char[PUBLICKEYBYTES];       /*receiver Static public key*/
    unsigned char pid_sig_char[CERT_BYTES];
    unsigned char acc_sig_char[CERT_BYTES];
    unsigned char pidB_char[PID_BYTES];

    unsigned char K_1[SECRETKEYBYTES];     /*secret key for aes encryption*/
 
    unsigned char cipher_char[CIPHER_BYTES];
    unsigned char cipher_sender[CIPHER_BYTES];
    unsigned char pt[CIPHER_BYTES];
    unsigned char pt_sender[CIPHER_BYTES];

    secp256k1_ge B;

    sm3_context sm3_ctx;
     


    if (NULL == AtoBmessage2 || NULL == BtoAmessage|| NULL == AtoBmessage ||  NULL == static_pk_b ||   NULL == eph_pk_x||
 NULL == pida || NULL == static_sk_a ||  NULL == eph_sk_x ||   NULL == eph_d || NULL == A_ss )
    return -2;

    /* decode message from server */

    memcpy(Y_bar_char, BtoAmessage, PUBLICKEYBYTES);
    memcpy(cipher_char, BtoAmessage+PUBLICKEYBYTES, CIPHER_BYTES);

    /* compute index = a+ dx */
    secp256k1_scalar_set_b32(&d, eph_d, &overflow);
    VERIFY_CHECK(overflow == 0);
    secp256k1_scalar_set_b32(&scalar_eph_sk, eph_sk_x, &overflow);
    VERIFY_CHECK(overflow == 0);
    secp256k1_scalar_set_b32(&a, static_sk_a, &overflow);
    VERIFY_CHECK(overflow == 0);

    secp256k1_scalar_mul( &index, &scalar_eph_sk, &d);
    secp256k1_scalar_add(&index, &index, &a);      /*compute index = a+ de*/

    /* compute Y^bar  */
    /*parse Y_bar_char into secp256k1_ge Y_bar, if Y_bar is not on the secp256k1 curve, abort */
    ret = secp256k1_eckey_pubkey_parse(&Y_bar,  Y_bar_char, PUBLICKEYBYTES);
    if(ret==0) return -1;
    secp256k1_gej_set_ge(&Y_bar_j, &Y_bar);

    /* compute PS */
    secp256k1_ecmult(&kctx->ecmult_ctx, &PS_j, &Y_bar_j, &index, NULL);    /* PS_j = index*Y_bar_j + Null*G  */
    if (secp256k1_gej_is_infinity(&PS_j)) return -1;
    secp256k1_ge_set_gej(&PS, &PS_j);
    ret =  secp256k1_eckey_pubkey_serialize(&PS, PS_char,  &size, 1);
    if (size!= PUBLICKEYBYTES ||ret ==0 ) return -1;


    /* Generate K_1 and K_2 by hash and seed expander  */


    sm3_starts( &sm3_ctx );
    sm3_update( &sm3_ctx, PS_char, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, AtoBmessage, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, Y_bar_char, PUBLICKEYBYTES);
    sm3_finish( &sm3_ctx, K_1 );

  /*generate shared secret and K_1 for AES by seed expander */

    sm3_starts( &sm3_ctx );
    sm3_update( &sm3_ctx, PS_char, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, AtoBmessage, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, Y_bar_char, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, K_1, SECRETKEYBYTES);
    sm3_finish( &sm3_ctx, A_ss );
 
    /*recover pt by AES_GCM  

    My_AES_gcm_decrypt(pt, cipher_char, CIPHER_BYTES, K_1);*/
    
    decrypt(pt, cipher_char, CIPHER_BYTES, K_1);

    memcpy(Y_char, pt, PUBLICKEYBYTES);
    memcpy(B_char, pt + PUBLICKEYBYTES, PUBLICKEYBYTES);
    memcpy(pid_sig_char, pt+(PUBLICKEYBYTES*2), CERT_BYTES);
    memcpy(pidB_char, pt + PUBLICKEYBYTES, PID_BYTES);
    /*generate e */

    sm3_starts( &sm3_ctx );
    sm3_update( &sm3_ctx, AtoBmessage, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, Y_char, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, pt+PUBLICKEYBYTES, PID_BYTES);
    sm3_finish( &sm3_ctx, output_hash );



    secp256k1_scalar_set_b32(&e, output_hash, &overflow);
    VERIFY_CHECK(overflow == 0);

    /* if Y_Bar != BY^e  then abort   */

    ret = secp256k1_eckey_pubkey_parse(&Y, Y_char, PUBLICKEYBYTES);
     if(ret==0) return -1;
        secp256k1_gej_set_ge(&Y_j, &Y);
     ret = secp256k1_eckey_pubkey_parse(&B, static_pk_b, PUBLICKEYBYTES);
     if(ret==0) return -1;
     secp256k1_ecmult(&kctx->ecmult_ctx, &Y_bar_j_check, &Y_j, &e, NULL);    /* Y_bar_j = e*Y_j + Null*G  */
     secp256k1_gej_add_ge(&Y_bar_j_check, &Y_bar_j_check, &B);
     secp256k1_ge_set_gej(&Y_bar_check, &Y_bar_j_check);
     ret =  secp256k1_eckey_pubkey_serialize(&Y_bar_check, Y_bar_check_char,  &size, 1);
     if (size!= PUBLICKEYBYTES ||ret ==0 ) return -1;
     ret = stringCompare(Y_bar_check_char, Y_bar_char,  PUBLICKEYBYTES);
    
     /*verify*/
     int ret1 = ecdsa_sig_verify(&kctx->ecmult_ctx, pid_sig_char, CA_pk, static_pk_b, PUBLICKEYBYTES);

     /*hB' == HB*/
     /*generate h'*/
        sm3_starts( &sm3_ctx);
        sm3_update( &sm3_ctx, flag, strlen(flag));
        sm3_update( &sm3_ctx, pidB_char, PID_BYTES);
        sm3_finish( &sm3_ctx, output_hash );
        memcpy(compute_h, output_hash, SECRETKEYBYTES );

    int ret2 = stringCompare(h, compute_h, SECRETKEYBYTES);

     if (ret!=0 && ret1!=0 && ret2!=0)
       {
         printf("Authentication failed for sender(Alice) !!");
         return -1;
       }

    /*generate CT by AES_GCM then memcpy Y_bar and Cipher text into receiver_public_message*/

      memcpy(pt_sender , pida, PID_BYTES);
      memcpy(pt_sender + PID_BYTES, eph_pk_x, PUBLICKEYBYTES);



     /* My_AES_gcm_encrypt(cipher_sender, pt_sender, PT_BYTES, K_1);*/

encrypt(cipher_sender, pt_sender, PT_BYTES, K_1);
      memcpy(AtoBmessage2, cipher_sender, CIPHER_BYTES);

   /*Alice  >>========>>=========>>  C_A = Enc_K1(H_A, pida ||X) =======>>========>>  Bob  */
return 0;

}

/*************************************
function:cake_kex_kdf_Bob2
desc :After receive receiver's public kex exchange infomation, it generates receiver's shared secret key
input :   static_pk_a       -alice's static public key A ;              33bytes
           K_1             -Bob's  key for AES encryption;               32  bytes
         AtoBmessage     -AtoB first message;                                 33bytes
         AtoBmessage2     -AtoB second message;                         144bytes
output:  null
return:  0  - succ
        -1- fail
        -2-invalid parameter
*************************************/

int  cake_kex_kdf_Bob2(  unsigned char * AtoBmessage, unsigned char * AtoBmessage2,
                    unsigned char * static_pk_a, unsigned char * K_1, unsigned char *h )
{

    int ret,  overflow;
    size_t  size;
   
    unsigned char output_hash[32];

    /*variable for receiver authentication*/

    unsigned char pt_receiver[CIPHER_BYTES];
    unsigned char X_char_receiver[PUBLICKEYBYTES];
    secp256k1_scalar d_receiver;
    unsigned char X_bar_check_receiver_char[PUBLICKEYBYTES];
    unsigned char pida_char[PID_BYTES];
    unsigned char pida_sig_char[CERT_BYTES];
    unsigned char compute_h[SECRETKEYBYTES];

    secp256k1_gej X_j_receiver;
    secp256k1_ge X_receiver;
    secp256k1_ge A;

    secp256k1_gej X_bar_check_j_receiver;
    secp256k1_ge X_bar_check_receiver;
    sm3_context sm3_ctx;


   if (NULL == AtoBmessage2 || NULL == AtoBmessage ||  NULL == static_pk_a ||   NULL == K_1  )
    return -2;

    /*recover pt_receiver by AES_GCM 

    My_AES_gcm_decrypt(pt_receiver, AtoBmessage2, CIPHER_BYTES, K_1); */

    decrypt(pt_receiver, AtoBmessage2, CIPHER_BYTES, K_1);

    memcpy(pida_sig_char, pt_receiver + PUBLICKEYBYTES, CERT_BYTES);
    memcpy(pida_char, pt_receiver, PID_BYTES);
    memcpy(X_char_receiver, pt_receiver+PID_BYTES, PUBLICKEYBYTES);

    sm3_starts( &sm3_ctx );
    sm3_update( &sm3_ctx, X_char_receiver, PUBLICKEYBYTES);
    sm3_update( &sm3_ctx, pida_char, PID_BYTES);
    sm3_finish( &sm3_ctx, output_hash );


    secp256k1_scalar_set_b32(&d_receiver, output_hash, &overflow);
    VERIFY_CHECK(overflow == 0);

     /*Check X_bar =  A+ dX */

     ret = secp256k1_eckey_pubkey_parse(&X_receiver, X_char_receiver, PUBLICKEYBYTES);
     if(ret==0) return -1;

    secp256k1_gej_set_ge(&X_j_receiver, &X_receiver);
     secp256k1_ecmult(&kctx->ecmult_ctx, &X_bar_check_j_receiver, &X_j_receiver, &d_receiver, NULL);    /* X_bar_check_j_receiver = d*X_j_receiver + Null*G  */
     ret = secp256k1_eckey_pubkey_parse(&A, static_pk_a, PUBLICKEYBYTES);
     if(ret==0) return -1;

     secp256k1_gej_add_ge(&X_bar_check_j_receiver, &X_bar_check_j_receiver, &A);
     secp256k1_ge_set_gej(&X_bar_check_receiver, &X_bar_check_j_receiver);
     ret =  secp256k1_eckey_pubkey_serialize(&X_bar_check_receiver, X_bar_check_receiver_char,  &size, 1);
     if (size!= PUBLICKEYBYTES ||ret ==0 ) return -1;

     ret = stringCompare(AtoBmessage, X_bar_check_receiver_char, PUBLICKEYBYTES);

    /*verify*/
     int ret1 = ecdsa_sig_verify(&kctx->ecmult_ctx, pida_sig_char, CA_pk, static_pk_a, PUBLICKEYBYTES);
    
     /*hA' == HA*/
     /*generate h'*/
        sm3_starts( &sm3_ctx);
        sm3_update( &sm3_ctx, flag, strlen(flag));
        sm3_update( &sm3_ctx, pida_char, PID_BYTES);
        sm3_finish( &sm3_ctx, output_hash);
        memcpy(compute_h, output_hash, SECRETKEYBYTES );

    int ret2 = stringCompare(h, compute_h, SECRETKEYBYTES);
        if (ret!=0 && ret1!=0 && ret2!=0)
       {
         printf("CAKE Authentication failed for receiver(Bob) !!");
           return -1;
       }

return 0;

}

/*
 * 32-bit integer manipulation macros (big endian)
 */
#ifndef GET_ULONG_BE
#define GET_ULONG_BE(n,b,i)                             \
{                                                       \
    (n) = ( (unsigned long) (b)[(i)    ] << 24 )        \
        | ( (unsigned long) (b)[(i) + 1] << 16 )        \
        | ( (unsigned long) (b)[(i) + 2] <<  8 )        \
        | ( (unsigned long) (b)[(i) + 3]       );       \
}
#endif

#ifndef PUT_ULONG_BE
#define PUT_ULONG_BE(n,b,i)                             \
{                                                       \
    (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \
    (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \
    (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}
#endif

/*
 * SM3 context setup
 */
void sm3_starts( sm3_context *ctx )
{
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x7380166F;
    ctx->state[1] = 0x4914B2B9;
    ctx->state[2] = 0x172442D7;
    ctx->state[3] = 0xDA8A0600;
    ctx->state[4] = 0xA96F30BC;
    ctx->state[5] = 0x163138AA;
    ctx->state[6] = 0xE38DEE4D;
    ctx->state[7] = 0xB0FB0E4E;

}

static void sm3_process( sm3_context *ctx, unsigned char data[64] )
{
    unsigned long SS1, SS2, TT1, TT2, W[68],W1[64];
    unsigned long A, B, C, D, E, F, G, H;
	unsigned long T[64];
	unsigned long Temp1,Temp2,Temp3,Temp4,Temp5;
	int j;
#ifdef _DEBUG
	int i;
#endif

	
	for(j = 0; j < 16; j++)
		T[j] = 0x79CC4519;
	for(j =16; j < 64; j++)
		T[j] = 0x7A879D8A;

    GET_ULONG_BE( W[ 0], data,  0 );
    GET_ULONG_BE( W[ 1], data,  4 );
    GET_ULONG_BE( W[ 2], data,  8 );
    GET_ULONG_BE( W[ 3], data, 12 );
    GET_ULONG_BE( W[ 4], data, 16 );
    GET_ULONG_BE( W[ 5], data, 20 );
    GET_ULONG_BE( W[ 6], data, 24 );
    GET_ULONG_BE( W[ 7], data, 28 );
    GET_ULONG_BE( W[ 8], data, 32 );
    GET_ULONG_BE( W[ 9], data, 36 );
    GET_ULONG_BE( W[10], data, 40 );
    GET_ULONG_BE( W[11], data, 44 );
    GET_ULONG_BE( W[12], data, 48 );
    GET_ULONG_BE( W[13], data, 52 );
    GET_ULONG_BE( W[14], data, 56 );
    GET_ULONG_BE( W[15], data, 60 );

#ifdef _DEBUG 
	printf("Message with padding:\n");
	for(i=0; i< 8; i++)
		printf("%08x ",W[i]);
	printf("\n");
	for(i=8; i< 16; i++)
		printf("%08x ",W[i]);
	printf("\n");
#endif

#define FF0(x,y,z) ( (x) ^ (y) ^ (z)) 
#define FF1(x,y,z) (((x) & (y)) | ( (x) & (z)) | ( (y) & (z)))

#define GG0(x,y,z) ( (x) ^ (y) ^ (z)) 
#define GG1(x,y,z) (((x) & (y)) | ( (~(x)) & (z)) )


#define  SHL(x,n) (((x) & 0xFFFFFFFF) << n)
#define ROTL(x,n) (SHL((x),n) | ((x) >> (32 - n)))

#define P0(x) ((x) ^  ROTL((x),9) ^ ROTL((x),17)) 
#define P1(x) ((x) ^  ROTL((x),15) ^ ROTL((x),23)) 

	for(j = 16; j < 68; j++ )
	{
		Temp1 = W[j-16] ^ W[j-9];
		Temp2 = ROTL(W[j-3],15);
		Temp3 = Temp1 ^ Temp2;
		Temp4 = P1(Temp3);
		Temp5 =  ROTL(W[j - 13],7 ) ^ W[j-6];
		W[j] = Temp4 ^ Temp5;
	}

#ifdef _DEBUG 
	printf("Expanding message W0-67:\n");
	for(i=0; i<68; i++)
	{
		printf("%08x ",W[i]);
		if(((i+1) % 8) == 0) printf("\n");
	}
	printf("\n");
#endif

	for(j =  0; j < 64; j++)
	{
        W1[j] = W[j] ^ W[j+4];
	}

#ifdef _DEBUG 
	printf("Expanding message W'0-63:\n");
	for(i=0; i<64; i++)
	{
		printf("%08x ",W1[i]);
		if(((i+1) % 8) == 0) printf("\n");
	}
	printf("\n");
#endif

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
#ifdef _DEBUG       
	printf("j     A       B        C         D         E        F        G       H\n");
	printf("   %08x %08x %08x %08x %08x %08x %08x %08x\n",A,B,C,D,E,F,G,H);
#endif

	for(j =0; j < 16; j++)
	{
		SS1 = ROTL((ROTL(A,12) + E + ROTL(T[j],j)), 7); 
		SS2 = SS1 ^ ROTL(A,12);
		TT1 = FF0(A,B,C) + D + SS2 + W1[j];
		TT2 = GG0(E,F,G) + H + SS1 + W[j];
		D = C;
		C = ROTL(B,9);
		B = A;
		A = TT1;
		H = G;
		G = ROTL(F,19);
		F = E;
		E = P0(TT2);
#ifdef _DEBUG 
		printf("%02d %08x %08x %08x %08x %08x %08x %08x %08x\n",j,A,B,C,D,E,F,G,H);
#endif
	}
	
	for(j =16; j < 64; j++)
	{
		SS1 = ROTL((ROTL(A,12) + E + ROTL(T[j],j)), 7); 
		SS2 = SS1 ^ ROTL(A,12);
		TT1 = FF1(A,B,C) + D + SS2 + W1[j];
		TT2 = GG1(E,F,G) + H + SS1 + W[j];
		D = C;
		C = ROTL(B,9);
		B = A;
		A = TT1;
		H = G;
		G = ROTL(F,19);
		F = E;
		E = P0(TT2);
#ifdef _DEBUG 
		printf("%02d %08x %08x %08x %08x %08x %08x %08x %08x\n",j,A,B,C,D,E,F,G,H);
#endif	
	}

    ctx->state[0] ^= A;
    ctx->state[1] ^= B;
    ctx->state[2] ^= C;
    ctx->state[3] ^= D;
    ctx->state[4] ^= E;
    ctx->state[5] ^= F;
    ctx->state[6] ^= G;
    ctx->state[7] ^= H;
#ifdef _DEBUG 
	   printf("   %08x %08x %08x %08x %08x %08x %08x %08x\n",ctx->state[0],ctx->state[1],ctx->state[2],
		                          ctx->state[3],ctx->state[4],ctx->state[5],ctx->state[6],ctx->state[7]);
#endif
}

/*
 * SM3 process buffer
 */
void sm3_update( sm3_context *ctx, const unsigned char *input, int ilen )
{
    int fill;
    unsigned long left;

    if( ilen <= 0 )
        return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += ilen;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (unsigned long) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sm3_process( ctx, ctx->buffer );
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    {
        sm3_process( ctx, input );
        input += 64;
        ilen  -= 64;
    }

    if( ilen > 0 )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, ilen );
    }
}

static const unsigned char sm3_padding[64] =
{
 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

/*
 * SM3 final digest
 */
void sm3_finish( sm3_context *ctx, unsigned char output[32] )
{
    unsigned long last, padn;
    unsigned long high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_ULONG_BE( high, msglen, 0 );
    PUT_ULONG_BE( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );

    sm3_update( ctx, (unsigned char *) sm3_padding, padn );
    sm3_update( ctx, msglen, 8 );

    PUT_ULONG_BE( ctx->state[0], output,  0 );
    PUT_ULONG_BE( ctx->state[1], output,  4 );
    PUT_ULONG_BE( ctx->state[2], output,  8 );
    PUT_ULONG_BE( ctx->state[3], output, 12 );
    PUT_ULONG_BE( ctx->state[4], output, 16 );
    PUT_ULONG_BE( ctx->state[5], output, 20 );
    PUT_ULONG_BE( ctx->state[6], output, 24 );
    PUT_ULONG_BE( ctx->state[7], output, 28 );
}

/*
 * output = SM3( input buffer )
 */
void sm3( unsigned char *input, int ilen,
           unsigned char output[32] )
{
    sm3_context ctx;

    sm3_starts( &ctx );
    sm3_update( &ctx, input, ilen );
    sm3_finish( &ctx, output );

    memset( &ctx, 0, sizeof( sm3_context ) );
}

/*
 * output = SM3( file contents )
 */
int sm3_file( char *path, unsigned char output[32] )
{
    FILE *f;
    size_t n;
    sm3_context ctx;
    unsigned char buf[1024];

    if( ( f = fopen( path, "rb" ) ) == NULL )
        return( 1 );

    sm3_starts( &ctx );

    while( ( n = fread( buf, 1, sizeof( buf ), f ) ) > 0 )
        sm3_update( &ctx, buf, (int) n );

    sm3_finish( &ctx, output );

    memset( &ctx, 0, sizeof( sm3_context ) );

    if( ferror( f ) != 0 )
    {
        fclose( f );
        return( 2 );
    }

    fclose( f );
    return( 0 );
}

/*
 * SM3 HMAC context setup
 */
void sm3_hmac_starts( sm3_context *ctx, unsigned char *key, int keylen )
{
    int i;
    unsigned char sum[32];

    if( keylen > 64 )
    {
        sm3( key, keylen, sum );
        keylen = 32;
        key = sum;
    }

    memset( ctx->ipad, 0x36, 64 );
    memset( ctx->opad, 0x5C, 64 );

    for( i = 0; i < keylen; i++ )
    {
        ctx->ipad[i] = (unsigned char)( ctx->ipad[i] ^ key[i] );
        ctx->opad[i] = (unsigned char)( ctx->opad[i] ^ key[i] );
    }

    sm3_starts( ctx);
    sm3_update( ctx, ctx->ipad, 64 );

    memset( sum, 0, sizeof( sum ) );
}

/*
 * SM3 HMAC process buffer
 */
void sm3_hmac_update( sm3_context *ctx, unsigned char *input, int ilen )
{
    sm3_update( ctx, input, ilen );
}

/*
 * SM3 HMAC final digest
 */
void sm3_hmac_finish( sm3_context *ctx, unsigned char output[32] )
{
    int hlen;
    unsigned char tmpbuf[32];

    hlen =  32;

    sm3_finish( ctx, tmpbuf );
    sm3_starts( ctx );
    sm3_update( ctx, ctx->opad, 64 );
    sm3_update( ctx, tmpbuf, hlen );
    sm3_finish( ctx, output );

    memset( tmpbuf, 0, sizeof( tmpbuf ) );
}

/*
 * output = HMAC-SM#( hmac key, input buffer )
 */
void sm3_hmac( unsigned char *key, int keylen,
                unsigned char *input, int ilen,
                unsigned char output[32] )
{
    sm3_context ctx;

    sm3_hmac_starts( &ctx, key, keylen);
    sm3_hmac_update( &ctx, input, ilen );
    sm3_hmac_finish( &ctx, output );

    memset( &ctx, 0, sizeof( sm3_context ) );
}

 

#endif /* CAKE_KEX_IMPL_H_ */
